// Generated by CoffeeScript 1.11.1
(function() {
  var helpers, wikidataTimeToDateObject;

  wikidataTimeToDateObject = require('./wikidata_time_to_date_object');

  helpers = {};

  helpers.isNumericId = function(id) {
    return /^[0-9]+$/.test(id);
  };

  helpers.isWikidataId = function(id) {
    return /^(Q|P)[0-9]+$/.test(id);
  };

  helpers.isWikidataEntityId = function(id) {
    return /^Q[0-9]+$/.test(id);
  };

  helpers.isWikidataPropertyId = function(id) {
    return /^P[0-9]+$/.test(id);
  };

  helpers.normalizeId = function(id, numericId, type) {
    if (type == null) {
      type = 'Q';
    }
    if (helpers.isNumericId(id)) {
      if (numericId) {
        return id;
      } else {
        return "" + type + id;
      }
    } else if (helpers.isWikidataId(id)) {
      if (numericId) {
        return id.slice(1);
      } else {
        return id;
      }
    } else {
      throw new Error('invalid id');
    }
  };

  helpers.getNumericId = function(id) {
    if (!helpers.isWikidataId(id)) {
      throw new Error("invalid wikidata id: " + id);
    }
    return id.replace(/Q|P/, '');
  };

  helpers.normalizeIds = function(ids, numericId, type) {
    if (type == null) {
      type = 'Q';
    }
    return ids.map(function(id) {
      return helpers.normalizeId(id, numericId, type);
    });
  };

  helpers.wikidataTimeToDateObject = wikidataTimeToDateObject;

  helpers.wikidataTimeToEpochTime = function(wikidataTime) {
    return wikidataTimeToDateObject(wikidataTime).getTime();
  };

  helpers.wikidataTimeToISOString = function(wikidataTime) {
    return wikidataTimeToDateObject(wikidataTime).toISOString();
  };

  helpers.normalizeWikidataTime = helpers.wikidataTimeToEpochTime;

  module.exports = helpers;

}).call(this);
