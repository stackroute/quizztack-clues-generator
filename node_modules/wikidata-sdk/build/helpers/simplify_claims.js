// Generated by CoffeeScript 1.11.1
(function() {
  var getLatLngFromCoordinates, helpers, nonNull, prefixedId, simplifyClaim, simplifyClaims, simplifyPropertyClaims;

  helpers = require('./helpers');

  simplifyClaims = function(claims, entityPrefix, propertyPrefix) {
    var id, propClaims, simpleClaims;
    simpleClaims = {};
    for (id in claims) {
      propClaims = claims[id];
      if (propertyPrefix) {
        id = propertyPrefix + ":" + id;
      }
      simpleClaims[id] = simplifyPropertyClaims(propClaims, entityPrefix, propertyPrefix);
    }
    return simpleClaims;
  };

  simplifyPropertyClaims = function(propClaims, entityPrefix, propertyPrefix) {
    return propClaims.map(function(claim) {
      return simplifyClaim(claim, entityPrefix, propertyPrefix);
    }).filter(nonNull);
  };

  nonNull = function(obj) {
    return obj != null;
  };

  simplifyClaim = function(claim, entityPrefix, propertyPrefix) {
    var datatype, datavalue, mainsnak;
    mainsnak = claim.mainsnak;
    if (mainsnak == null) {
      return null;
    }
    datatype = mainsnak.datatype, datavalue = mainsnak.datavalue;
    if (datavalue == null) {
      return null;
    }
    switch (datatype) {
      case 'string':
      case 'commonsMedia':
      case 'url':
      case 'external-id':
        return datavalue.value;
      case 'monolingualtext':
        return datavalue.value.text;
      case 'wikibase-item':
        return prefixedId(datavalue, entityPrefix);
      case 'wikibase-property':
        return prefixedId(datavalue, propertyPrefix);
      case 'time':
        return helpers.normalizeWikidataTime(datavalue.value.time);
      case 'quantity':
        return parseFloat(datavalue.value.amount);
      case 'globe-coordinate':
        return getLatLngFromCoordinates(datavalue.value);
      default:
        return null;
    }
  };

  prefixedId = function(datavalue, prefix) {
    var id;
    id = datavalue.value.id;
    if (typeof prefix === 'string') {
      return prefix + ":" + id;
    } else {
      return id;
    }
  };

  getLatLngFromCoordinates = function(value) {
    var latitude, longitude;
    latitude = value.latitude, longitude = value.longitude;
    return [latitude, longitude];
  };

  module.exports = {
    simplifyClaims: simplifyClaims,
    simplifyPropertyClaims: simplifyPropertyClaims,
    simplifyClaim: simplifyClaim
  };

}).call(this);
